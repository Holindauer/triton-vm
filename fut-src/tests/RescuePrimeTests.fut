module BFieldElement = import "../BFieldElement"
module Fp = BFieldElement
type BFieldElement = BFieldElement.BFieldElement
type Fp = BFieldElement
import "../RescuePrime"
module Utils = import "../Utils"
module Parameters = import "../RescuePrimeParameters"
type DefaultParameters = Parameters.DefaultParameters
def parameters : DefaultParameters = Parameters.default_parameters
def m = Parameters.m


-- Test first_batch_single
-- ==
-- entry: test_rescue_prime_first_batch_single
-- input {}
-- output {
--            [
--                13772361690486541727u64,
--                13930107128811878860u64,
--                10372771888229343819u64,
--                3089663060285256636u64,
--                13524175591068575265u64
--            ]
-- }
entry test_rescue_prime_first_batch_single: [5]u64 =
  let inputs1    = (replicate 10 0) :> [Parameters.rate]i64
   in rescue_prime_hash_10 parameters (map u64.i64 inputs1) :> [5]u64


-- Test first_batch_round
-- ==
-- entry: test_rescue_prime_round
-- input {}
-- output {
--            [
--                  12540160971320428993u64,
--                  12715796236381522033u64,
--                  17625421765656277400u64,
--                  4287567932922685320u64,
--                  18131101139378981652u64,
--                  2583394647818783777u64,
--                  4666179056099342595u64,
--                  14808635022483777923u64,
--                  3023021651988000964u64,
--                  17034129237592691113u64,
--                  8180556657687271803u64,
--                  12693918936561225470u64,
--                  3818391970775134817u64,
--                  16858233916294722342u64,
--                  18304560619712925115u64,
--                  10380712539835648741u64
--            ]
-- }
entry test_rescue_prime_round: [Parameters.m]u64 =
  let inputs1    = [0u64, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] :> [Parameters.m]u64
   in rescue_XLIX_round parameters inputs1 0

-- --------------------------
--   fn test_compliance() {
-- -------------------------


--      // hash 10, first batch
-------------------------------
-- Test first_batch
-- ==
-- entry: test_rescue_prime_first_batch
-- input {}
-- output {
--        [
--            [
--                13772361690486541727u64,
--                13930107128811878860u64,
--                10372771888229343819u64,
--                3089663060285256636u64,
--                13524175591068575265u64
--            ],
--            [
--                6189874031558670378u64,
--                10677984284721664052u64,
--                11094778135221566221u64,
--                14014056563831415241u64,
--                17624827189757302581u64
--            ],
--            [
--                8051330103982111662u64,
--                11028112094367299718u64,
--                13272421194765666592u64,
--                10549698261930941220u64,
--                11916714144939538031u64
--            ],
--            [
--                16599150548794199309u64,
--                10493776575292205727u64,
--                1383032563775085972u64,
--                13461691265189540514u64,
--                5850245107934240031u64
--            ],
--            [
--                1945888927084124766u64,
--                1359531585423726517u64,
--                571115580035577760u64,
--                11111259412951139324u64,
--                5196253525869594875u64
--            ],
--            [
--                7114248945826389783u64,
--                10711114340774706221u64,
--                1725038494551646750u64,
--                5126322762295353904u64,
--                263075078948948040u64
--            ],
--            [
--                6920355036596643958u64,
--                1429967828412209302u64,
--                17849302350128548438u64,
--                17338513521733790109u64,
--                16932869691567724957u64
--            ],
--            [
--                105964463927719565u64,
--                9782095356206296143u64,
--                8894170595070814364u64,
--                5355551316895236465u64,
--                5948538211133255u64
--            ],
--            [
--                17155306598521508982u64,
--                14472525374811419229u64,
--                16093490088522805438u64,
--                3181770408060478711u64,
--                1640164811138798343u64
--            ],
--            [
--                4347619024993392377u64,
--                3485116829811114387u64,
--                4909926852610789363u64,
--                7049913000384061828u64,
--                5525683604796387635u64
--            ]
--        ]
--        }
entry test_rescue_prime_first_batch: [10][]u64 =
  let ten: [10]i64 = iota 10
  let inputs0:    [10][Parameters.rate]i64 = map (\x -> (replicate 9 0) ++ [x] :> [Parameters.rate]i64) ten :> [10][Parameters.rate]i64
  let inputs1:    [10][Parameters.rate]BFieldElement = Utils.map2d (\x -> BFieldElement.new <| u64.i64 x) inputs0
   in map (rescue_prime_hash_10 parameters) inputs1 :> [10][Parameters.rescue_prime_digest_length]u64


--        // hash 10, second batch
----------------------------------

-- Test second_batch
-- ==
-- entry: test_rescue_prime_second_batch
-- input {}
-- output {
--         [
--            [
--                1161630535021658359u64,
--                12802704886281901257u64,
--                5310064968286039002u64,
--                16402665326204561132u64,
--                15530842331109449708u64
--            ],
--            [
--                14361074708917363055u64,
--                2973268553816013426u64,
--                14423563135619089510u64,
--                12919806918032553606u64,
--                1236538015722961393u64
--            ],
--            [
--                15557076570140697692u64,
--                18184365344427218921u64,
--                13484852599853983709u64,
--                13107035934236521262u64,
--                12263607846531896566u64
--            ],
--            [
--                6606345110125563613u64,
--                4726659718853731050u64,
--                10369781804093423850u64,
--                11406738559336087061u64,
--                9592587996153825778u64
--            ],
--            [
--                6941529093020236364u64,
--                10640545875110113888u64,
--                11208725571809152547u64,
--                11694492597767881733u64,
--                16029873915245617377u64
--            ],
--            [
--                1593003208162720544u64,
--                5732973444506631828u64,
--                12557012035524685001u64,
--                11271950808101345806u64,
--                9333507744968394366u64
--            ],
--            [
--                10813877996011332235u64,
--                5998166913909153813u64,
--                629292377717800414u64,
--                15727071196577879481u64,
--                4491609621508834803u64
--            ],
--            [
--                4266637802759423528u64,
--                13789207577808039094u64,
--                10064576707545119428u64,
--                7511635467227872433u64,
--                6960370489820239537u64
--            ],
--            [
--                14498937510007389283u64,
--                14239237126868820990u64,
--                11153197751373890408u64,
--                4310772621580754358u64,
--                2864799328000030300u64
--            ],
--            [
--                6189874031558670378u64,
--                10677984284721664052u64,
--                11094778135221566221u64,
--                14014056563831415241u64,
--                17624827189757302581u64
--            ]
--        ]
-- }
entry test_rescue_prime_second_batch: [10][]u64 =
  let ten:        [10]i64 = iota 10
  let inputs0:    [10][Parameters.rate]i64 = map (\x -> (replicate x 0) ++ [1] ++ (replicate (9-x) 0)  :> [Parameters.rate]i64) ten :> [10][Parameters.rate]i64
  let inputs1:    [10][Parameters.rate]BFieldElement = Utils.map2d (\x -> BFieldElement.new <| u64.i64 x) inputs0
   in map (rescue_prime_hash_10 parameters) inputs1 :> [10][Parameters.rescue_prime_digest_length]u64


--        // hash varlen, third batch
-------------------------------------

-- Test third_batch
-- ==
-- entry: test_rescue_prime_third_batch
-- input {}
-- output {
--         [
--            [
--                9954340196098770044u64,
--                16766478858550921719u64,
--                14795358262939961687u64,
--                5971715312175262159u64,
--                10621735453321362721u64
--            ],
--            [
--                12391337510008436236u64,
--                15657559504547420941u64,
--                9377428313701566093u64,
--                6455690240973939776u64,
--                17925569643122616714u64
--            ],
--            [
--                14112140563534526715u64,
--                12091338198119135732u64,
--                16277751626976027823u64,
--                4331384491863420413u64,
--                15800084865512048249u64
--            ],
--            [
--                15410161320350300674u64,
--                12862508375582878113u64,
--                1871289024748006724u64,
--                1120358582983879653u64,
--                10608258519034552134u64
--            ],
--            [
--                1107344292722494872u64,
--                17391364595468230070u64,
--                4218215235563531160u64,
--                7497689442794338714u64,
--                3900922406630849053u64
--            ],
--            [
--                16822019589580184555u64,
--                7989891526544888053u64,
--                14569641731101827620u64,
--                17919386380356552805u64,
--                7463713352054333042u64
--            ],
--            [
--                674513153759557192u64,
--                5885835165060751739u64,
--                7545202825089012468u64,
--                7455443267898983077u64,
--                11460188487338022037u64
--            ],
--            [
--                1452905481212349824u64,
--                4602871015292638258u64,
--                16799505315703203495u64,
--                15502476305285227202u64,
--                14418240163510509007u64
--            ],
--            [
--                2169799351531593851u64,
--                141901148303731658u64,
--                12571509576917037512u64,
--                2730951366471393395u64,
--                10868840823954592153u64
--            ],
--            [
--                5004294054773159410u64,
--                15035327361975356310u64,
--                14190623520133446702u64,
--                16843665251688123638u64,
--                4543333205754908370u64
--            ],
--            [
--                16497508931324347828u64,
--                10379016827033660777u64,
--                5027352471010305075u64,
--                15362732119758725484u64,
--                13390969807239861733u64
--            ],
--            [
--                1743559568736995800u64,
--                11815709956493259346u64,
--                5763576938286686837u64,
--                7541138447063081288u64,
--                17969015713376415699u64
--            ],
--            [
--                10441678943133242957u64,
--                15290592304889070108u64,
--                18288160234755515065u64,
--                3671382450876247307u64,
--                3447450231474938402u64
--            ],
--            [
--                11057569330409963321u64,
--                4984952761946312859u64,
--                16529019269578375042u64,
--                1908152979369527531u64,
--                7121827819059879337u64
--            ],
--            [
--                17067972955397432517u64,
--                2912062349216497629u64,
--                15263972887304976204u64,
--                9246522127607732383u64,
--                17610927156233305697u64
--            ],
--            [
--                5980270367087450085u64,
--                2990338491388854267u64,
--                3198993023459349000u64,
--                5035257001959372883u64,
--                5260797048498744804u64
--            ],
--            [
--                8542899768037601505u64,
--                5239516840302652488u64,
--                2299137376555803866u64,
--                952010414036958775u64,
--                9717098700918296507u64
--            ],
--            [
--                8231024478155080292u64,
--                9594681520895674398u64,
--                191017068357133911u64,
--                1512051294906340420u64,
--                12055973608766483576u64
--            ],
--            [
--                16653142742451850722u64,
--                9252945525340562222u64,
--                4805241920959388929u64,
--                937662086458078174u64,
--                17775208482321191727u64
--            ],
--            [
--                14634923894397095166u64,
--                1247948061415695017u64,
--                3048493836613607105u64,
--                2432649783604354905u64,
--                7424726151688166928u64
--            ]
--        ]
-- }
entry test_rescue_prime_third_batch: [20]RescuePrimeDigest =
  (loop actual: []RescuePrimeDigest = [] for i < 20 do
    let input: []Fp = iota i |> map Fp.I64
     in actual ++ [rescue_prime_hash_varlen parameters input]
     ) :> [20]RescuePrimeDigest


def rescue_XLIX_round_partial_round
  (parameters: DefaultParameters)
  (state: State)
  (_i: i64)
  : State
  =
  -- S-box
  let state1 : State = map (\s -> Fp.powmod s parameters.alpha) state
  -- MDS
  let state2 : State = matvecmul parameters.MDS state1
   in state2

-- Test partial_round
-- ==
-- entry: test_rescue_prime_patial_round
-- input { [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] }
-- output { [9299251109463355586u64
--          ,15976851336066264973u64
--          ,11166637114176107647u64
--          ,15348134641425534317u64
--          ,13686134078990282256u64
--          ,15525898013590114220u64
--          ,3450680129426514449u64
--          ,17380140322475310871u64
--          ,12097502176737093539u64
--          ,4011065750438379262u64
--          ,360520228019433604u64
--          ,3757988693748665664u64
--          ,10125964651618904310u64
--          ,14683940370413280021u64
--          ,1575260301095390454u64
--          ,8203665094215494082u64] }
entry test_rescue_prime_patial_round (input: [Parameters.m]i32) : State =
  rescue_XLIX_round_partial_round (copy parameters) (map u64.i32 input) 0

